/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


#include "../myVars" //Include global variables

scale   1;

vertices        
(
    ( $xmin $ymin $zmin ) //0
    ( $xmax $ymin $zmin ) //1
    ( $xmin $ymax $zmin ) //2
    ( $xmax $ymax $zmin ) //3
    ( $xmin $ymin $zmax ) //4
    ( $xmax $ymin $zmax ) //5
    ( $xmin $ymax $zmax ) //6
    ( $xmax $ymax $zmax ) //7                   
);

// OVERALL EXPANSION RATIOS
exp_l1  2.0;
exp_l3  3.0;

exp_w1  1.7;
exp_w3  1.7;

exp_h1  1.7;
exp_h3  1.3;

// CELL-TO-CELL EXPANSION RATIOS
// This formulas need expansion ratios > 1

beta_l1 #eval "($l1-$size_x) / ($l1-$size_x*$exp_l1)";
beta_l3 #eval "($l3-$size_x) / ($l3-$size_x*$exp_l3)";
beta_w1 #eval "($w1-$size_0) / ($w1-$size_0*$exp_w1)";
beta_w3 #eval "($w3-$size_0) / ($w3-$size_0*$exp_w3)";
beta_h1 #eval "($h1-$size_0) / ($h1-$size_0*$exp_h1)";
beta_h3 #eval "($h3-$size_0) / ($h3-$size_0*$exp_h3)";

// NUMBER OF CELLS PER REGION 
// From https://openfoamwiki.net/index.php/Scripts/blockMesh_grading_calculation
// https://www.cfd-online.com/Forums/openfoam/233981-how-find-expension-ratio-between-2consecutive-cells-planar-abrupt-contraction.html
// X

Nx_1     #calc "round(abs(1+log($exp_l1)/log($beta_l1)))";
Nx_3     #calc "round(abs(1+log($exp_l3)/log($beta_l3)))";
Nx_2     #calc "round($l2/$size_x)"; // Cells in the uniform region
Nx       #calc "$Nx_1 + $Nx_2 + $Nx_3"; 

// Y
Ny_1     #calc  "round(abs(1+log($exp_w1)/log($beta_w1)))";
Ny_3     #calc  "round(abs(1+log($exp_w3)/log($beta_w3)))";
Ny_2     #eval "round($w2/$size_0)"; // Cells in the uniform region
Ny       #eval "$Ny_1 + $Ny_2 + $Ny_3"; 

// Z
Nz_1     #calc "round(abs(1+log($exp_h1)/log($beta_h1)))";
Nz_3     #calc  "round(abs(1+log($exp_h3)/log($beta_h3)))";
Nz_2     #eval "round($h2/$size_0)"; // Cells in the uniform region
Nz       #eval "$Nz_1 + $Nz_2 + $Nz_3"; 

// GRADING BLOCKS DEFINITON //
// X
// % of the block lenght
dist_l1 #eval "($l1)/$length";
dist_l2 #eval "($l2)/$length";
dist_l3 #eval "($l3)/$length";

// % of the total cells
cells_l1 #eval "($Nx_1)/$Nx";
cells_l3 #eval "($Nx_3)/$Nx";
cells_l2 #eval "1.0-$cells_l1-$cells_l3";

// Y
// % of the block lenght
dist_w1 #eval "($w1)/$width";
dist_w2 #eval "($w2)/$width";
dist_w3 #eval "($w3)/$width";
// % of the total cells
cells_w1 #eval "($Ny_1)/$Ny";
cells_w3 #eval "($Ny_3)/$Ny";
cells_w2 #eval "1.0-$cells_w1-$cells_w3";

// Z
// % of the block lenght
dist_h1 #eval "($h1)/$height";
dist_h2 #eval "($h2)/$height";
dist_h3 #eval "($h3)/$height";
// % of the total cells
cells_h1 #eval "($Nz_1)/$Nz";
cells_h3 #eval "($Nz_3)/$Nz";
cells_h2 #eval "1.0-$cells_h1-$cells_h3";

blocks
(   
    hex (0 1 3 2 4 5 7 6) ( $Nx $Ny $Nz )
    //simpleGrading (1 1 1)
    simpleGrading
    (
        (
            ($dist_l1   $cells_l1   #eval "1/$exp_l1")  // % x-dir, 20% cells, expansion 1/2
            ($dist_l2   $cells_l2   1) // % x-dir, 60% cells, expansion     
            ($dist_l3   $cells_l3   $exp_l3) // % x-dir, 20% cells, expansion 2
        )
        (
            ($dist_w1   $cells_w1   #eval "1/$exp_w1")  // % x-dir, 20% cells, expansion 1/1.7
            ($dist_w2   $cells_w2   1) // % x-dir, 60% cells, expansion     
            ($dist_w3   $cells_w3   $exp_w3) // % x-dir, 20% cells, expansion 1.7
        )
        (
            ($dist_h1   $cells_h1   #eval "1/$exp_h1")  // % x-dir, 20% cells, expansion 1/1.7
            ($dist_h2   $cells_h2   1) // % x-dir, 60% cells, expansion     
            ($dist_h3   $cells_h3   $exp_h3) // % x-dir, 20% cells, expansion 1.7
        )
    )
);

edges
(
);

boundary
(
    // Dummy patch to trigger overset interpolation before any other bcs
    oversetPatch
    {
        type overset;
        faces ();
    }
    stationaryWalls
    {
        type wall;
        faces
        (
            (0 1 3 2) //bottom
            (0 1 5 4) //back
            (2 3 7 6) //front
        );
    }
    
    inlet
    {
    	type patch;
    	faces
    	(
    		(0 4 6 2) //inlet
    	);
    }
    
    outlet
    {
    	type patch;
    	faces
    	(
    		(1 5 7 3) //outlet
    	);
    }
    
    atmosphere
    {
        type patch;
        faces
        (
            (4 5 7 6)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
