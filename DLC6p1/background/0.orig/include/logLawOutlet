// Logarithmic profile inlet condition

type fixedValue;
value #codeStream
{
	codeInclude
	#{
		#include "fvCFD.H"
	#};

	codeOptions
	#{
		-I$(LIB_SRC)/finiteVolume/lnInclude \
		-I$(LIB_SRC)/meshTools/lnInclude
	#};

	codeLibs
	#{
		-lmeshTools \
		-lfiniteVolume
	#};

	code
	#{
		const IOdictionary& d = static_cast<const IOdictionary&>
		(
			dict.parent().parent()
		);

		const fvMesh& mesh = refCast<const fvMesh>(d.db());
		const label id = mesh.boundary().findPatchID("outlet");
		const fvPatch& patch = mesh.boundary()[id];

		vectorField U(patch.size(), vector(0, 0, 0));

		const scalar U_ref = 12.76; //Hub height vel
		const scalar z_ref = 150.0; //Hub height
		const scalar z_0 = 0.00609; // Surface roughness length	
		const scalar z_ground = 0.0; //Ground height
		scalar U_h = 0.0; //Height-varying velocity

		forAll(U, i)
		{
    			const scalar z = patch.Cf()[i].z(); // Fetching the z-coordinate using the z() method
    			if (z - z_ground > z_0) // Above ground height
    			{   
      				  U_h = U_ref * log((z-z_ground)/z_0)/log((z_ref-z_ground)/z_0); //Log profile without $ interpolation
				  Info << "Calculated U_h for face " << i << ": " << U_h << endl;

       				 U[i] = vector(U_h, 0., 0.); 
   			 } 
    			 else 
   			 {			
      				  U[i] = vector(0., 0., 0.);
        			Info << "U value set to 0 for face " << i << endl;   
    			}   
		};

		U.writeEntry("",os);

	#};

};
